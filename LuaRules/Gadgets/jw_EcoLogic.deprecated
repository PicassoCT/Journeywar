
  function gadget:GetInfo()
  	return {
			name = "Ecology gadget",
			desc = "Controlls the Gaia Wildlife",
			author = "Picadorro",
			date = "3rd of May 2010",
			license = "Free",
			layer = 0,
			version = 1,
			enabled = true
		}
	end

	-- modified the script: only corpses with the customParam "featuredecaytime" will disappear

	if (gadgetHandler:IsSyncedCode()) then
	
	-- INCLUDES
	VFS.Include("scripts/toolKit.lua")
	
	local roughDistance=approxDist
	--Global Variables
	local SIGHTDISTANCE=242
	local NSIGHTDISTANCE=-242
	local SOCIALRAD= 64
	local NURSERAD= 32
	local GRASSNUTRITION=42
	local gaiaTeam=Spring.GetGaiaTeamID()
	--End Global Variables
	
	local PriorityStateMap={
							["Water"]			="DRINK" ,
							["Social"]			="CLOSE",
							["Health"]			="SICK",
							["Age"]				="CLOSEMUM",
							["Energy"]			="REST",
							["Mate"]			="SEX",
							["KinCare"]			="NURSE",
							["Security"]		="ESCAPE",
							["Play"]			="GAME",
							["Pregnant"]		="FOOD",
							["Infected"]		="INFECT",
							["PoisonStress"]	="SICK"
						
							}
							
	function GetStateFromPriority(untid, Priority)
	if Priority=="Food" and AgentTable[unitid].Type=="Hohymen" then return "FOOD" end
	if Priority=="Food" and AgentTable[unitid].Type=="VaryFoo" then return "HUNT" end
	return PriorityStateMap[Priority] or "REST" 
	end
	
	RawHohymen={	Type	="Hohymen",
					AgentState= "REST",
					Values	= {	["Water"]		=0, 
								["Food"]		=0,
								["Social"]		=0,
								["Health"]		=0,
								["Age"]			=0,
								["Energy"]		=0,
								["Mate"]		=0,
								["KinCare"]		=0,
								["Security"]	=100,
								["Play"]		=0, 
								["Pregnant"]	=0,
								["Infected"]	=0,
								["PoisonStress"]=0
								},	
					 Memory={}
						
			   }	

	RawVaryFoo={	Type	="VaryFoo",
					AgentState= "REST",
					Values= {	
								["Water"]		=0, 
								["Food"]		=0,
								["Social"]		=0,
								["Health"]		=0,
								["Age"]			=0,
								["Energy"]		=0,
								["Mate"]		=0,
								["KinCare"]		=0,
								["Security"]	=100,
								["Play"]		=0 							
								},
					 Memory={}
						
			   }


	HohymenStates={ --Eating Grass
					["FOOD"]={
						func=Eat, 
						Transition={		
									["Water"]=  { StateChangeFunc=FindWater, TargetState="DRINK" }, 
									["Food"]=  { StateChangeFunc=FindFood, TargetState="FOOD" },
									["Social"]=  { StateChangeFunc=FindCompany, TargetState="CLOSE" },
									["Age"]=  { StateChangeFunc=FindParent, TargetState="CLOSEMUM"  },
									["Energy"]=  { StateChangeFunc=FindRest,TargetState="REST"},
									["Health"]=  { StateChangeFunc=SeperateAndCure, TargetState="SICK"},
									["Mate"]=  { StateChangeFunc=FindPartner, TargetState="SEX" },
									["Security"]=  {StateChangeFunc=MakeEscape, TargetState="ESCAPE" },
									["KinCare"]=  { StateChangeFunc=CareForKin, TargetState="NURSE"},
									["Play"]=  { StateChangeFunc=PlayWithYoung, TargetState="GAME"},
							  }},
						["DRINK"]={
						func=DrinkWater, 
						Transition={		["Water"]={ StateChangeFunc=FindWater, TargetState="DRINK" }, 
									["Food"]={ StateChangeFunc=FindFood, TargetState="FOOD" },
									["Social"]={ StateChangeFunc=FindCompany, TargetState="CLOSE" },
									["Age"]={ StateChangeFunc=FindParent, TargetState="CLOSEMUM"  },
									["Energy"]={ StateChangeFunc=FindRest,TargetState="REST"},
									["Health"]={ StateChangeFunc=SeperateAndCure, TargetState="SICK"},
									["Mate"]={ StateChangeFunc=FindPartner, TargetState="SEX" },
									["Security"]={StateChangeFunc=MakeEscape, TargetState="ESCAPE" },
									["KinCare"]={ StateChangeFunc=CareForKin, TargetState="NURSE"},
									["Play"]={ StateChangeFunc=PlayWithYoung, TargetState="GAME"},
							  }},
						["CLOSE"]={						
						func=MoveCloser, 
						Transition={		["Water"]={ StateChangeFunc=FindWater, TargetState="DRINK" }, 
									["Food"]={ StateChangeFunc=FindFood, TargetState="FOOD" },
									["Age"]={ StateChangeFunc=FindParent, TargetState="CLOSEMUM"  },
									["Energy"]={ StateChangeFunc=FindRest,TargetState="REST"},
									["Health"]={ StateChangeFunc=SeperateAndCure, TargetState="SICK"},
									["Mate"]={ StateChangeFunc=FindPartner, TargetState="SEX" },
									["Security"]={StateChangeFunc=MakeEscape, TargetState="ESCAPE" },
									["KinCare"]={ StateChangeFunc=CareForKin, TargetState="NURSE"},
									["Play"]={ StateChangeFunc=PlayWithYoung, TargetState="GAME"},
							  }},
						["CLOSEMUM"]={
						func=HideInHerd, 
						Transition={		["Water"]={ StateChangeFunc=FindWater, TargetState="DRINK" }, 
									["Food"]={ StateChangeFunc=FindFood, TargetState="FOOD" },
									["Social"]={ StateChangeFunc=FindCompany, TargetState="CLOSE" },
									["Energy"]={ StateChangeFunc=FindRest,TargetState="REST"},
									["Health"]={ StateChangeFunc=SeperateAndCure, TargetState="SICK"},
									["Security"]={StateChangeFunc=MakeEscape, TargetState="ESCAPE" },
									["KinCare"]={ StateChangeFunc=CareForKin, TargetState="NURSE"},
									["Play"]={ StateChangeFunc=PlayWithYoung, TargetState="GAME"},
							  }},	
						["REST"]={
						func=Resting, 
						Transition={		["Water"]={ StateChangeFunc=FindWater, TargetState="DRINK" }, 
									["Food"]={ StateChangeFunc=FindFood, TargetState="FOOD" },
									["Social"]={ StateChangeFunc=FindCompany, TargetState="CLOSE" },
									["Age"]={ StateChangeFunc=FindParent, TargetState="CLOSEMUM"  },
									["Energy"]={ StateChangeFunc=FindRest,TargetState="REST"},
									["Health"]={ StateChangeFunc=SeperateAndCure, TargetState="SICK"},
									["Mate"]={ StateChangeFunc=FindPartner, TargetState="SEX" },
									["Security"]={StateChangeFunc=MakeEscape, TargetState="ESCAPE" },
									["KinCare"]={ StateChangeFunc=CareForKin, TargetState="NURSE"},
									["Play"]={ StateChangeFunc=PlayWithYoung, TargetState="GAME"},
							  }},
						["SICK"]={
						func=RecoveringLonely, 
						Transition={		["Water"]={ StateChangeFunc=FindWater, TargetState="DRINK" }, 
									["Food"]={ StateChangeFunc=FindFood, TargetState="FOOD" },
									["Social"]={ StateChangeFunc=FindCompany, TargetState="CLOSE" },
									["Age"]={ StateChangeFunc=FindParent, TargetState="CLOSEMUM"  },
									["Energy"]={ StateChangeFunc=FindRest,TargetState="REST"},
									["Health"]={ StateChangeFunc=SeperateAndCure, TargetState="SICK"},
									["Mate"]={ StateChangeFunc=FindPartner, TargetState="SEX" },
									["Security"]={StateChangeFunc=MakeEscape, TargetState="ESCAPE" },
									["KinCare"]={ StateChangeFunc=CareForKin, TargetState="NURSE"},
									["Play"]={ StateChangeFunc=PlayWithYoung, TargetState="GAME"},
							  }},
						["SEX"]={
						func=FuckingInTheBushes, 
						Transition={		["Water"]={ StateChangeFunc=FindWater, TargetState="DRINK" }, 
									["Food"]={ StateChangeFunc=FindFood, TargetState="FOOD" },
									["Social"]={ StateChangeFunc=FindCompany, TargetState="CLOSE" },
									["Energy"]={ StateChangeFunc=FindRest,TargetState="REST"},
									["Health"]={ StateChangeFunc=SeperateAndCure, TargetState="SICK"},
									["Mate"]={ StateChangeFunc=FindPartner, TargetState="SEX" },
									["Security"]={StateChangeFunc=MakeEscape, TargetState="ESCAPE" },
							  }},
						["ESCAPE"]={
						func=RunningForLive, 
						Transition={		["Water"]={ StateChangeFunc=FindWater, TargetState="DRINK" }, 
									["Food"]={ StateChangeFunc=FindFood, TargetState="FOOD" },
									["Social"]={ StateChangeFunc=FindCompany, TargetState="CLOSE" },
									["Age"]={ StateChangeFunc=FindParent, TargetState="CLOSEMUM"  },
									["Energy"]={ StateChangeFunc=FindRest,TargetState="REST"},
									["Health"]={ StateChangeFunc=SeperateAndCure, TargetState="SICK"},
									["Mate"]={ StateChangeFunc=FindPartner, TargetState="SEX" },
									["Security"]={StateChangeFunc=MakeEscape, TargetState="ESCAPE" },
									["KinCare"]={ StateChangeFunc=CareForKin, TargetState="NURSE"},
									["Play"]={ StateChangeFunc=PlayWithYoung, TargetState="GAME"},
							  }},
						["NURSE"]={
						func=NurseYoung, 
						Transition={		["Water"]={ StateChangeFunc=FindWater, TargetState="DRINK" }, 
									["Food"]={ StateChangeFunc=FindFood, TargetState="FOOD" },
									["Social"]={ StateChangeFunc=FindCompany, TargetState="CLOSE" },
									["Age"]={ StateChangeFunc=FindParent, TargetState="CLOSEMUM"  },
									["Energy"]={ StateChangeFunc=FindRest,TargetState="REST"},
									["Health"]={ StateChangeFunc=SeperateAndCure, TargetState="SICK"},
									["Security"]={StateChangeFunc=MakeEscape, TargetState="ESCAPE" },
									["KinCare"]={ StateChangeFunc=CareForKin, TargetState="NURSE"},
									["Play"]={ StateChangeFunc=PlayWithYoung, TargetState="GAME"},
							  }},
						["GAME"]={
						func=Play, 
						Transition={		["Water"]={ StateChangeFunc=FindWater, TargetState="DRINK" }, 
									["Food"]={ StateChangeFunc=FindFood, TargetState="FOOD" },
									["Social"]={ StateChangeFunc=FindCompany, TargetState="CLOSE" },
									["Age"]={ StateChangeFunc=FindParent, TargetState="CLOSEMUM"  },
									["Energy"]={ StateChangeFunc=FindRest,TargetState="REST"},
									["Health"]={ StateChangeFunc=SeperateAndCure, TargetState="SICK"},
									["Security"]={StateChangeFunc=MakeEscape, TargetState="ESCAPE" },
									["Play"]={ StateChangeFunc=PlayWithYoung, TargetState="GAME"},
							  }},						  
						["DEAD"]={
						func=RemoveAnimal, 
						Transition={		
							  }},	
							  
						["INFECT"]={
						func=DieAlone, 
						Transition={		
							  }},						  
							  
				  }

	VaryFooStates={ --Eat Meat
					["HUNT"]={
						func=AttackPrey, 
						Transition={
									["Water"]={ StateChangeFunc=FindWater, TargetState="DRINK" }, 
									["Food"]={ StateChangeFunc=FindPrey, TargetState="HUNT" }, 
									["Health"]={ StateChangeFunc=SeperateAndCure, TargetState="SICK"},
									["Mate"]={ StateChangeFunc=FindPartner, TargetState="SEX" },
									["Security"]={StateChangeFunc=MakeEscape, TargetState="ESCAPE" },
									}},
						["FOOD"]={
						func=Eat, 
						Transition={		
									["Water"]={ StateChangeFunc=FindWater, TargetState="DRINK" }, 
									["Food"]={ StateChangeFunc=FindPrey, TargetState="HUNT" }, 
									["Social"]={ StateChangeFunc=FindCompany, TargetState="CLOSE" },
									["Age"]={ StateChangeFunc=FindParent, TargetState="CLOSEMUM"  },
									["Energy"]={ StateChangeFunc=FindRest,TargetState="REST"},
									["Health"]={ StateChangeFunc=SeperateAndCure, TargetState="SICK"},
									["Mate"]={ StateChangeFunc=FindPartner, TargetState="SEX" },
									["Security"]={StateChangeFunc=MakeEscape, TargetState="ESCAPE" },
									["KinCare"]={ StateChangeFunc=HowlForBackUp, TargetState="COMMUNICATE"},
									["Play"]={ StateChangeFunc=PlayWithYoung, TargetState="GAME"},
							  }},
						["DRINK"]={
						func=DrinkWater, 
						Transition={		["Water"]={ StateChangeFunc=FindWater, TargetState="DRINK" }, 
									["Food"]={ StateChangeFunc=FindPrey, TargetState="HUNT" },
									["Social"]={ StateChangeFunc=FindCompany, TargetState="CLOSE" },
									["Age"]={ StateChangeFunc=FindParent, TargetState="CLOSEMUM"  },
									["Energy"]={ StateChangeFunc=FindRest,TargetState="REST"},
									["Health"]={ StateChangeFunc=SeperateAndCure, TargetState="SICK"},
									["Mate"]={ StateChangeFunc=FindPartner, TargetState="SEX" },
									["Security"]={StateChangeFunc=MakeEscape, TargetState="ESCAPE" },
									["KinCare"]={ StateChangeFunc=HowlForBackUp, TargetState="COMMUNICATE"},
									["Play"]={ StateChangeFunc=PlayWithYoung, TargetState="GAME"},
							  }},
						["CLOSE"]={						
						func=MoveCloser, 
						Transition={		["Water"]={ StateChangeFunc=FindWater, TargetState="DRINK" }, 
									["Food"]={ StateChangeFunc=FindPrey, TargetState="HUNT" },
									["Age"]={ StateChangeFunc=FindParent, TargetState="CLOSEMUM"  },
									["Energy"]={ StateChangeFunc=FindRest,TargetState="REST"},
									["Health"]={ StateChangeFunc=SeperateAndCure, TargetState="SICK"},
									["Mate"]={ StateChangeFunc=FindPartner, TargetState="SEX" },
									["Security"]={StateChangeFunc=MakeEscape, TargetState="ESCAPE" },
									["KinCare"]={ StateChangeFunc=HowlForBackUp, TargetState="COMMUNICATE"},
									["Play"]={ StateChangeFunc=PlayWithYoung, TargetState="GAME"},
							  }},
						["CLOSEMUM"]={
						func=HideInHerd, 
						Transition={		["Water"]={ StateChangeFunc=FindWater, TargetState="DRINK" }, 
									["Food"]={ StateChangeFunc=FindPrey, 	TargetState="HUNT" },
									["Social"]={ StateChangeFunc=FindCompany, TargetState="CLOSE" },
									["Energy"]={ StateChangeFunc=FindRest,TargetState="REST"},
									["Health"]={ StateChangeFunc=SeperateAndCure, TargetState="SICK"},
									["Security"]={StateChangeFunc=MakeEscape, TargetState="ESCAPE" },
									["KinCare"]={ StateChangeFunc=HowlForBackUp, TargetState="COMMUNICATE"},
									["Play"]={ StateChangeFunc=PlayWithYoung, TargetState="GAME"},
							  }},	
						["REST"]={
						func=Resting, 
						Transition={		["Water"]={ StateChangeFunc=FindWater, TargetState="DRINK" }, 
									["Food"]={ StateChangeFunc=FindPrey, TargetState="HUNT" },
									["Social"]={ StateChangeFunc=FindCompany, TargetState="CLOSE" },
									["Age"]={ StateChangeFunc=FindParent, TargetState="CLOSEMUM"  },
									["Energy"]={ StateChangeFunc=FindRest,TargetState="REST"},
									["Health"]={ StateChangeFunc=SeperateAndCure, TargetState="SICK"},
									["Mate"]={ StateChangeFunc=FindPartner, TargetState="SEX" },
									["Security"]={StateChangeFunc=MakeEscape, TargetState="ESCAPE" },
									["KinCare"]={ StateChangeFunc=HowlForBackUp, TargetState="COMMUNICATE"},
									["Play"]={ StateChangeFunc=PlayWithYoung, TargetState="GAME"},
							  }},
						["SICK"]={
						func=RecoveringLonely, 
						Transition={		["Water"]={ StateChangeFunc=FindWater, TargetState="DRINK" }, 
									["Food"]={ StateChangeFunc=FindPrey, TargetState="HUNT" },
									["Social"]={ StateChangeFunc=FindCompany, TargetState="CLOSE" },
									["Age"]={ StateChangeFunc=FindParent, TargetState="CLOSEMUM"  },
									["Energy"]={ StateChangeFunc=FindRest,TargetState="REST"},
									["Health"]={ StateChangeFunc=SeperateAndCure, TargetState="SICK"},
									["Mate"]={ StateChangeFunc=FindPartner, TargetState="SEX" },
									["Security"]={StateChangeFunc=MakeEscape, TargetState="ESCAPE" },
									["KinCare"]={ StateChangeFunc=HowlForBackUp, TargetState="COMMUNICATE"},
									["Play"]={ StateChangeFunc=PlayWithYoung, TargetState="GAME"},
							  }},
						["SEX"]={
						func=FuckingInTheBushes, 
						Transition={		["Water"]={ StateChangeFunc=FindWater, TargetState="DRINK" }, 
									["Food"]={ StateChangeFunc=FindPrey, TargetState="HUNT" },
									["Social"]={ StateChangeFunc=FindCompany, TargetState="CLOSE" },
									["Energy"]={ StateChangeFunc=FindRest,TargetState="REST"},
									["Health"]={ StateChangeFunc=SeperateAndCure, TargetState="SICK"},
									["Mate"]={ StateChangeFunc=FindPartner, TargetState="SEX" },
									["Security"]={StateChangeFunc=MakeEscape, TargetState="ESCAPE" },
							  }},
						["ESCAPE"]={
						func=RunningForLive, 
						Transition={		["Water"]={ StateChangeFunc=FindWater, TargetState="DRINK" }, 
									["Food"]={ StateChangeFunc=FindPrey, TargetState="HUNT" },
									["Social"]={ StateChangeFunc=FindCompany, TargetState="CLOSE" },
									["Age"]={ StateChangeFunc=FindParent, TargetState="CLOSEMUM"  },
									["Energy"]={ StateChangeFunc=FindRest,TargetState="REST"},
									["Health"]={ StateChangeFunc=SeperateAndCure, TargetState="SICK"},
									["Mate"]={ StateChangeFunc=FindPartner, TargetState="SEX" },
									["Security"]={StateChangeFunc=MakeEscape, TargetState="ESCAPE" },
									["KinCare"]={ StateChangeFunc=HowlForBackUp, TargetState="COMMUNICATE"},
									["Play"]={ StateChangeFunc=PlayWithYoung, TargetState="GAME"},
							  }},
						["COMMUNICATE"]={
						func=COMMUNICATEYoung, 
						Transition={		["Water"]={ StateChangeFunc=FindWater, TargetState="DRINK" }, 
									["Food"]={ StateChangeFunc=FindPrey, TargetState="HUNT" },
									["Social"]={ StateChangeFunc=FindCompany, TargetState="CLOSE" },
									["Age"]={ StateChangeFunc=FindParent, TargetState="CLOSEMUM"  },
									["Energy"]={ StateChangeFunc=FindRest,TargetState="REST"},
									["Health"]={ StateChangeFunc=SeperateAndCure, TargetState="SICK"},
									["Security"]={StateChangeFunc=MakeEscape, TargetState="ESCAPE" },
									["KinCare"]={ StateChangeFunc=HowlForBackUp, TargetState="COMMUNICATE"},
									["Play"]={ StateChangeFunc=PlayWithYoung, TargetState="GAME"},
							  }},
						["GAME"]={
						func=PlayRough, 
						Transition={		["Water"]={ StateChangeFunc=FindWater, TargetState="DRINK" }, 
									["Food"]={ StateChangeFunc=FindPrey, TargetState="HUNT" },
									["Social"]={ StateChangeFunc=FindCompany, TargetState="CLOSE" },
									["Age"]={ StateChangeFunc=FindParent, TargetState="CLOSEMUM"  },
									["Energy"]={ StateChangeFunc=FindRest,TargetState="REST"},
									["Health"]={ StateChangeFunc=SeperateAndCure, TargetState="SICK"},
									["Security"]={StateChangeFunc=MakeEscape, TargetState="ESCAPE" },
									["Play"]={ StateChangeFunc=PlayWithYoung, TargetState="GAME"},
							  }},						  
						["DEAD"]={
						func=RemoveAnimal, 
						Transition={		
							  }},			
				  }

	
				  
	--Statefunctions --returns true once successfull execution alters the values
	function 	Eat  (unitid, nr, other,x,y,z)
		if AgentTable[unitid].Type == "Hohymen" then
			if getMap(x,z)==GRASS then
			setMap(x,z,BARELAND)
			AgentTable[unitid].values["Food"]=	math.min(AgentTable[unitid].values["Food"]+ GRASSNUTRITION,100)
			return transferStatechangeToUnitScript(unitid,"Eat", other)
			end
		return false
		else --VaryFoo eating the creature slayed
		x,y,z=x,y,z
			if other and Spring.GetUnitIsDead(other) == true and AgentTable[other].AgentState ~="DEAD" then
			x,y,z=AgentTable[other].Memory["lastknownposition"].x,AgentTable[other].Memory["lastknownposition"].y,AgentTable[other].Memory["lastknownposition"].z
			else
			tx,tz=FindValuePos(3)
				if tx and tx~= false then 
				x=tx 
				z=tz
				end
			end
		return transferStatechangeToUnitScript(unitid,"Meat",{x=x,y=y,z=z})
		end
	end
		
	function 	 DrinkWater  (unitid, nr, other,x,y,z)
		if Spring.GetGroundHeight(x,z) <= 0 then
		AgentTable[unitid].values["Water"]= 100
		return transferStatechangeToUnitScript(unitid,"DrinkWater")
		else
		return false
		end
	end 	
	
	function 	 MoveCloser  (unitid, nr, other,x,y,z)
		AgentTable[unitid].values["Water"]=math.max(0,AgentTable[unitid].values["Water"]-0.5)
		AgentTable[unitid].values["Food"]=math.max(0,AgentTable[unitid].values["Food"]-0.5)
		AgentTable[unitid].values["Social"]=math.min(AgentTable[unitid].values["Social"]+1,100)
		AgentTable[unitid].values["Mate"]=math.min(100,AgentTable[unitid].values["Mate"]+1)
	return transferStatechangeToUnitScript(unitid,"MoveCloser",{[1]=other})
	end	
	
	function 	 HideInHerd  (unitid, nr, other,x,y,z)
		AgentTable[unitid].values["Water"]=math.max(0,AgentTable[unitid].values["Water"]-0.5)
		AgentTable[unitid].values["Food"]=math.max(0,AgentTable[unitid].values["Food"]-0.5)
		AgentTable[unitid].values["PoisonStress"]=math.max(0,AgentTable[unitid].values["PoisonStress"]+2)
	return transferStatechangeToUnitScript(unitid,"HideInHerd",{[1]=other})	
	end
	
	function 	 Rest  (unitid, nr, other,x,y,z)
		AgentTable[unitid].values["Water"]=math.max(0,AgentTable[unitid].values["Water"]-0.5)
		AgentTable[unitid].values["Food"]=math.max(0,AgentTable[unitid].values["Food"]-0.5)
		AgentTable[unitid].values["Energy"]= AgentTable[unitid].values["Energy"]+1
		AgentTable[unitid].values["Mate"]=math.min(100,AgentTable[unitid].values["Mate"]+1)
	return transferStatechangeToUnitScript(unitid,"Rest",{[1]=other})	
	end
	
	function 	 RecoveringLonely (unitid, nr, nearestAlly,x,y,z) 
	if not nearestAlly or Spring.GetUnitIsDead(nearestAlly) == true then return false end
	ox,oy,oz=Spring.GetUnitPosition(nearestAlly)
		if roughDistance(ox-x,oy-y,oz-z) > SIGHTDISTANCE then
		AgentTable[unitid].values["Water"]=math.max(0,AgentTable[unitid].values["Water"]-0.5)
		AgentTable[unitid].values["Food"]=math.max(0,AgentTable[unitid].values["Food"]-0.5)
		AgentTable[unitid].values["Social"]=math.max(0,AgentTable[unitid].values["Social"]-1)
		AgentTable[unitid].values["Health"]=	math.min(100,AgentTable[unitid].values["Health"]+1)
		AgentTable[unitid].values["PoisonStress"]=math.max(0,AgentTable[unitid].values["PoisonStress"]-1)
		return transferStatechangeToUnitScript(unitid,"RecoveringLonely")	
		else
		return false
		end
	end
	
	function 	 FuckingInTheBushes (unitid, nr, other,x,y,z) 
	if not other or Spring.GetUnitIsDead(other) == true then return false end
	AgentTable[unitid].values["Water"]=math.max(0,AgentTable[unitid].values["Water"]-2)
	AgentTable[unitid].values["Food"]=math.max(0,AgentTable[unitid].values["Food"]-2)
	AgentTable[unitid].values["Health"]=	math.min(100,AgentTable[unitid].values["Health"]+1)
	AgentTable[unitid].values["PoisonStress"]=math.max(0,AgentTable[unitid].values["PoisonStress"]-1)
	AgentTable[unitid].values["Mate"]=math.max(0,AgentTable[unitid].values["Mate"]-6)
		return transferStatechangeToUnitScript(unitid,"FuckingInTheBushes",{[1]=other})	
	end
    function FindPrey(unitid, nr, other,x,y,z)
	--TODO
	end
	
	
	--Deer is in the State of Running from a thread
	function 	 RunningForLive  (unitid, nr, other,x,y,z)
	-- Is it dead can we eat it?
	if not unitid or Spring.GetUnitIsDead(unitid) == true then killABeast(unitid) end 
	
	if not other or Spring.GetUnitIsDead(other) == true then return false end 
	ox,oy,oz=Spring.GetUnitPosition(other)
	dist=roughDistance(ox-x,oy-y,oz-z)
		if dist < SIGHTDISTANCESIGHTDISTANCE then
		AgentTable[unitid].values["Energy"]= AgentTable[unitid].values["Energy"]-2
		vx,vy,vz=x-ox,y-oy,z-oz
		vx,vy,vz=(vx/dist)*NSIGHTDISTANCE,(vy/dist)*NSIGHTDISTANCE,(vz/dist)*NSIGHTDISTANCE
		Spring.SetUnitMoveGoal(unitid,x+vx,y+vy,z+vz)
		return transferStatechangeToUnitScript(unitid,"RunningForLive",{[1]=other})	
		end
	return false
	end
	function 	 NurseYoung  (unitid, nr, other,x,y,z)
			if other and Spring.GetUnitIsDead(other) == false then
			return transferStatechangeToUnitScript(unitid,"NurseYoung",{[1]=other})	
			end
		end
	function 	 Play  (unitid, nr, other,x,y,z)
	end
	
	
	--Transitionfunction: represent the Transitions from one State into another (if a unit fails a transition it returns to the original state)
	Vec={
		[1]={x=1,z=1},
		[2]={x=0,z=1},
		[3]={x=-1,z=1},
		[4]={x=-1,z=0},
		[5]={x=1,z=0},
		[6]={x=-1,z=-1},
		[7]={x=0,z=-1},
		[8]={x=1,z=-1},
		}
	--Helperfunction using broadsearch, which is sort of shitty, especially as landscapefeatures are linear distributed, so yeah, spearsearch would be better
	function FindValuePos(unitid,valueType)

	x,y,z=Spring.GetUnitPosition(unitid)
	
	if getMap(x,z)== valueType then return true, true end

	local lVec=Vec
	local lMap=getMap
		for i=1,#lMap, 1 do
				for j=1,#Vec,1 do
					if lMap(x+i*lVect[j].x,z+i*lVect[j].z) ==valueType then 
					--we found water but it is it visible to the animal 
					a=(i*lVect[j].x)*8
					b=(i*lVect[j].z)*8
					dist=roughDistance(a,0,b)
					if dist < SIGHTDISTANCE then
					return (x+i*lVect[j].x)*8,(z+i*lVect[j].z)*8 end
						else
						return false, false
						end
				end
		end
	return false,false
	end	
	
	function GetDistBetweenTwo(idA,idB)
    x,y,z=Spring.GetUnitPosition(idA)	
    bx,by,bz=Spring.GetUnitPosition(idB)	
	return roughDistance(x-bx,y-by,z-bz)	
	end
	
	function FindWater(unitid)
		if AgentTable[unitid].Type == "Hohymen" then
			tx,tz= FindValuePos(unitid,0)

				if tx and tx ~= true and tx ~= false then
				Spring.SetUnitMoveGoal(unitid,tx,tz)
				end
				
				if tx == true then --StateSwitch to drinking function
				return true
				end
			return false  
		else --VaryFoo
				
		end	
		
	end 

	function FindParent(unitid, temp)
		if AgentTable[unitid].Type == "Hohymen" then
			other =AgentTable[unitid].Memory["Parent"]
			if other == nil then return false end
			px,py,pz	=Spring.GetUnitPosition(unitid)
			x,y,z		=Spring.GetUnitPosition(other)
			dx,dy,dz	=x-px,y-py,z-pz
			temp= roughDistance(dx,dy,dz)
				if temp < SIGHTDISTANCE or math.random(1,16)==1 then
				
					if temp > SOCIALRAD then 
					Spring.SetUnitMoveGoal(unitid,x,y,z) 
					else 
					AgentTable[unitid].values["Social"]=math.max(	AgentTable[unitid].values["Social"]+1,100)
					return true end
				else
				Spring.SetUnitMoveGoal(unitid, px+math.random(-15,15), 0,pz+math.random(-15,15))
				Spring.Echo("JW_ECOLOGOYGADGET::YOUNG CALLING FOR MUM")
				AgentTable[unitid].values["Social"]=math.min(AgentTable[unitid].values["Social"]-1,0)
				return false
				end
			return false
		else --VaryFoo
				
		end	
	end 

	function FindFood(unitid, other)
		if AgentTable[unitid].Type == "Hohymen" then
				if AgentTable[unitid].values["Age"] < 21 then
				--Find Parent
					dist=GetDistBetweenTwo(unitid,AgentTable[unitid].Memory["Parent"] )
					if AgentTable[unitid].Memory["Parent"] and dist <SIGHTDISTANCE then
					x,y,z=Spring.GetUnitPosition(AgentTable[unitid].Memory["Parent"])
					Spring.SetUnitMoveGoal(unitid,x,y,z)
						if dist <NURSERAD then
						return true
						else
						return false
						end
					else
					return false
					end	
				end	
				tx,tz= FindValuePos(unitid,1)

					if tx and tx ~= true and tx ~= false then
					Spring.SetUnitMoveGoal(unitid,tx,tz)
					end
					
					if tx == true then --StateSwitch to eating function
					return true
					end
					return false  
		else --VaryFoo
			
		end	
	end 

	function FindCompany(unitid)
		if AgentTable[unitid].Type == "Hohymen" then
			id=Spring.GetUnitNearestAlly(unitid)
			x,y,z=Spring.GetUnitPosition(unitid)
				if id then 
				px,py,pz=Spring.GetUnitPosition(id)
				dist= roughDistance(px-x,0,pz-z)
						if dist < SIGHTDISTANCE then
						Spring.SetUnitMoveGoal(unitid,px-(math.random(1,SOCIALRAD/2)),py,pz-(math.random(1,SOCIALRAD/2)))
						
							if dist < SOCIALRAD then
							return true				
							end 
						else --we search the Memory of the creature
						--TODO
						return false
						end
				else -- for ever alone
				return false
				end
			return false
		else --VaryFoo
				
		end	
	end 

	function FindRest(unitid, other)
		if AgentTable[unitid].Type == "Hohymen" then
			ed=Spring.GetUnitNearestEnemy(unitid)
			
			if not ed then return true end
			ex,ey,ez=Spring.GetUnitPosition(ed)
			x,y,z=Spring.GetUnitPosition(unitid)
				
			--all the conditions for sleeping
				if 	AgentTable[unitid].values["Security"] > 75 and AgentTable[unitid].values["Social"] > 50 and 
				Spring.GetGroundHeight(x,z) > 0 and AgentTable[unitid].values["Food"] > 50 and 
				AgentTable[unitid].values["Energy"] < 75 and AgentTable[unitid].values["Age"] > 12 and AgentTable[unitid].values["Mate"]==0 then
				return true
				end
			return false
		else --VaryFoo
				
		end	
	end	

	function SeperateAndCure(unitid, other)
		if AgentTable[unitid].Type == "Hohymen" then
			x,y,z=Spring.GetUnitPosition(unitid)
			
			T=Spring.GetUnitsInCylinder(x,z,SIGHTDISTANCE)
			table.remove(T,unitid)
				if T and #T >0 then
				ex,ey,ez=Spring.GetUnitPosition(T[1])
				vx,vz=(x-ex)*-4,(z-ez)*-4
				Spring.SetUnitMoveGoal(unitid,x+vx,0,z+vz)
				return false
					else
					return true
					end	
		else --VaryFoo
				
		end	
	end 

	function FindPartner(unitid)
	if AgentTable[unitid].Type == "Hohymen" then
		
		x,y,z=Spring.GetUnitPosition(unitid)
		
		if AgentTable[unitid].Memory["Partner"] and Spring.GetUnitIsDead(AgentTable[unitid].Memory["Partner"])==false then
				px,py,pz=Spring.GetUnitPosition(AgentTable[unitid].Memory["Partner"])
				if roughDistance(x-px,z-pz) < SEXDIST then
				return true
				else				
				Spring.SetUnitMoveGoal(unitid,px,py,pz)
				return false
				end
		end
		T=Spring.GetUnitsInCylinder(x,z,SIGHTDISTANCE,gaiaTeam)
		table.remove(T,unitid)
		SuiTableSuitors={}
		if T then
		
		for i=1,#T,1 do
			if AgentTable[T[i]].values["Age"] > 21 
			and AgentTable[T[i]].values["Mate"] > 50 
			and AgentTable[T[i]].values["KinCare"] < 10
			and AgentTable[T[i]].values["Pregnant"]== 0
			and AgentTable[T[i]].values["Security"] > 50 then
			SuiTableSuitors[#SuiTableSuitors+1]=T[i]
			end
		end
		AgentTable[unitid].Memory["Partner"] = SuiTableSuitors[math.random(1,#SuiTableSuitors)]
		px,py,pz=Spring.GetUnitPosition(AgentTable[unitid].Memory["Partner"])
		Spring.SetUnitMoveGoal(unitid,px,py,pz)
		return true
		end

	else --VaryFoo
			
	end	
	end 

	function MakeEscape(unitid, other)
		if AgentTable[unitid].Type == "Hohymen" then
			T=Spring.GetUnitNearestEnemy(unitid,SIGHTDISTANCE,true)
			if not T then
			SetUnitCobVal(unitid,COB.MAX_SPEED,157279)--2.4 *65533
			return true 
			end
				SetUnitCobVal(unitid,COB.MAX_SPEED,275238) --4.2 *65533
				x,y,z=Spring.GetUnitPosition(unitid)
				ex,ey,ez=Spring.GetUnitPosition(T)
				dx,dz=x-ex,z-ez
				norm= roughDistance(dx,dz)
				dx,dz= dx/norm*SIGHTDISTANCE*-1, dz/norm*SIGHTDISTANCE*-1
				Spring.SetUnitMoveGoal(unitid,x+dx,0,z+dz)
				
		else --VaryFoo
				
		end	
	end 

	function CareForKin(unitid, other)			--new OffSpring
		if AgentTable[unitid].Type == "Hohymen" then
				if not AgentTable[unitid].Memory["Kin"] or (AgentTable[unitid].Memory["Kin"]~= other and AgentTable[AgentTable[unitid].Memory["Kin"]].values["Age"] > 21) then
				return false
				end
			
				if other ==AgentTable[unitid].Memory["Kin"] and Spring.GetUnitIsDead(other)== false then
				x,y,z=Spring.GetUnitPosition(unitid)
				kx,ky,kz=Spring.GetUnitPosition(other)
					if roughDistance(x-kx,z-kz) < NURSERAD and AgentTable[AgentTable[unitid].Memory["Kin"]].values["Food"] < 25 and AgentTable[AgentTable[unitid].Memory["Kin"]].AgentState=="FOOD"  then
					return true
					else
						if distance < SIGHTDISTANCE then
						Spring.SetUnitMoveGoal(unitid, kx+5,0, kz-5)
						return false
						else 
							Spring.SetUnitMoveGoal(unitid,x+((x-kx)*math.random(-2,2)),0,z+((z-kz)*math.random(-2,2)))
							return false
						--freak out
						end
					end
				end

			return false
		else --VaryFoo
				
		end	
	end 

	function PlayWithYoung	(unitid, other)
		if AgentTable[unitid].Type == "Hohymen" then
			if not AgentTable[unitid].Memory["Kin"] or (AgentTable[unitid].Memory["Kin"] ~= other and AgentTable[AgentTable[unitid].Memory["Kin"]].values["Age"] > 21) then
			return false
			end
				if other ==AgentTable[unitid].Memory["Kin"] and Spring.GetUnitIsDead(other)== false then
				x,y,z=Spring.GetUnitPosition(unitid)
				kx,ky,kz=Spring.GetUnitPosition(other)
				distance=roughDistance(x-kx,z-kz)
				if distance < PLAYRAD and AgentTable[AgentTable[unitid].Memory["Kin"]].values["Play"] < 50 and AgentTable[AgentTable[unitid].Memory["Kin"]].AgentState=="GAME" then return true
				else
						if distance < SIGHTDISTANCE  then
						Spring.SetUnitMoveGoal(unitid, kx+5,0, kz-5)
						return false
						else 
						Spring.SetUnitMoveGoal(unitid,x+((x-kx)*math.random(-2,2)),0,z+((z-kz)*math.random(-2,2)))
						return false
					--freak out
					end
				end
				end

			return false
		else --VaryFoo
				
		end	
	end 
		
	function RemoveAnimal(unitid)
	AgentTable[unitid]= nil
	end
	
    local WATER=0
    local GRASS=1
    local BARELAND=2
	
	--Map encoding
	-- 0 Water --1 Grass --2  Grass Goone -- 3 Meat
	local spGetHeight=Spring.GetGroundHeight
	local Map={}
		for i=1,#Map,1 do
		Map[i]={}
			for j=1,#Map[1],1 do
			Map[i][j]={}
			k,l=((i-1)*8)+1,((j-1)*8)+1
			if spGetHeight(k,l) > WATER and math.random(0,1)==1 then Map[i][j] =GRASS else Map[i][j]= BARELAND end
			end
		end
		
	function getMap(x,z)
	return Map[math.floor(x/8)+1][math.floor(z/8)+1]	
	end

	function setMap(x,z,val)
	Map[math.floor(x/8)+1][math.floor(z/8)+1]=val	
	end
		
	function CreateAnimal(Animal)
	Animal.Water=50
	Animal.Food=50
	Animal.Social=0
	Animal.Age=1
	Animal.Energy=100
	Animal.Health=Spring.GetUnitHealth(Animal.unitid)
	return Animal
	end
			   
	local HOHYMDEF		=UnitDefNames["ghohymen"].id
	local VARYFOODEF	=UnitDefNames["gvaryfoo"].id
	
    function gadget:UnitCreated(unitID, unitDefID, unitTeam)
		if unitDefID== HOHYMDEF or unitDefID == VARYFOODEF then
		Spring.Echo("JW_ECOLOGOYGADGET:UnitCreated")
		x,y,z=Spring.GetUnitPosition(unitID)
		spawnAgent(unitDefID, x,y,z,unitID)
		--TODO Find out where you stored the positions
		end
	end
			   
	--AgentTable =[Agentid]={Type, SozialState, AgentState,  Values }
	local AgentTable={}
	--initialisises the eco-system
	function spawnAgent(typename, x,y,z, unitid)
	uid=0
	if typename==VARYFOODEF then 
							uid=unitid

												

							animalProto={}
							 animalProto=RawVaryFoo
							 animalProto.unitid=uid
							 animalProto=CreateAnimal(animalProto)
							 table.insert(AgentTable, animalProto)
							
							 animalProto={}
							 animalProto=RawVaryFoo
							 animalProto.unitid=uid
							 animalProto=CreateAnimal(animalProto)
							 AgentTable[uid]=animalProto
							 end
	
	if typename== HOHYMDEF then 
							 uid=unitid						
							 animalProto={}
							 animalProto=RawVaryFoo
							 animalProto.unitid=uid
							 animalProto=CreateAnimal(animalProto)
							 table.insert(AgentTable, animalProto)
							
							 local animalProto=RawVaryFoo
							 animalProto.unitid=uid
							 animalProto=CreateAnimal(animalProto)
							 AgentTable[uid]=animalProto
							 end	


	end

	function init()

	end

	--Sets the Unit to its new state
	function transferStatechangeToUnitScript(id,functionname,argumentTable)
					  env = Spring.UnitScript.GetScriptEnv(id)
					  if env then
					  Spring.UnitScript.CallAsUnit(id,env.functionswitch,functionname, argumentTable )		
					  return true
					  end
	return false
	end
	
	function SetUnitCobVal(id, cobvalue, valueToSet)
						env = Spring.UnitScript.GetScriptEnv(id)
					  if env then
					  Spring.UnitScript.CallAsUnit(id,env.SetUnitValue,cobvalue, valueToSet )		
					  return true
					  end
	end
		

	
	function gadget:UnitDestroyed(unitid)
		if AgentTable[unitid] then
		x,y,z=Spring.GetUnitPosition(unitid)
		AgentTable[unitid].Memory["lastknownposition"]= {x=x,y=y,z=z}
		AgentTable[unitid].AgentState="DEAD"
		end
	end
	
	function evaluatePriorities(unitid)
	highestPriority="Security"
	ValSoFar=0
		for k,v in ipairs(AgentTable[unitid].values) do
			if v < ValSoFar  then
			highestPriority=k
			ValSoFar=v
			end
		end
	return highestPriority
	end
	
	
	function stateMostWanted(unitid)
	Priority=evaluatePriorities(unitid)
	
		if Priority then -- a prioritized urge has emerged
		return GetStateFromPriority(Priority)
		end
	end
	
	function Transition(unitid,LongedState)
	
		if AgentTable[unitid].Type=="Hohymen" then
		
			if HohymenStates[AgentTable[unitid].AgentState].Transition[State] then
					return 	HohymenStates[AgentTable[unitid].AgentState].Transition[State].StateChangeFunc(unitid),LongedState
			end 
		else --VaryFoo
			if VaryFooStates[AgentTable[unitid].AgentState].Transition[State] then
				return 	HohymenStates[AgentTable[unitid].AgentState].Transition[State].StateChangeFunc(unitid),LongedState
			end
		end
	end
	
	local boolInit=false
	
	function gadget:GameFrame(frame)
	
		if boolInit==true then
		
			if frame == 3 then
			Spring.CreateUnit("ghohymen",Game.mapSizeX/2,0,Game.mapSizeZ/2,1,gaiaTeam)
			Spring.CreateUnit("ghohymen",Game.mapSizeX/2,0,Game.mapSizeZ/2,1,gaiaTeam)
			Spring.CreateUnit("ghohymen",Game.mapSizeX/2,0,Game.mapSizeZ/2,1,gaiaTeam)
			end
			if frame %1023 == 0 then
				for k,v in ipairs(AgentTable) do
				--evaluate Prioritys
				 LongedState=stateMostWanted(k)
				-- if a Transition exists use it
					if LongedState then
						boolSucessfullTransiton, ResultState= Transition(unitid,LongedState)
						if boolSucessfullTransiton==true then
						x,y,z=Spring.GetUnitPosition(unitid)
							if AgentTable[unitid].Type=="Hohymen" then
								HohymenStates[LongedState].func(unitid, other,x,y,z)
							else
								VaryFooStates[LongedState].func(unitid, other,x,y,z)
							end
							
						end				
					end
				end
			end		
		else
		init()
		boolInit=false
		end
	end	

	end--GlobalEnd
